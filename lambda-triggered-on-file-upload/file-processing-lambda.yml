AWSTemplateFormatVersion: 2010-09-09
Description: creates bucket for gifs, IAM roles for Lambdas, and Lambda functions
Parameters:
  FileBucketName:
    Type: String
    Description: name for the bucket
  LambdaName:
    Type: String
    Description: name for the file processing lambda
  RawPrefix:
    Type: String
    Description: key where original files will be stored
    Default: 'pre'
  ProcessedPrefix:
    Type: String
    Description: key where processed files will be stored
    Default: 'post'
  #NOTE - the code bucket is not created via the picam.yml template, you must create it beforehand and upload the code
  CodeBucketName:
    Type: String
    Description: name of bucket containing lambda code 
  CodeS3Key:
    Type: String
    Description: location of zipped lambda code
Resources:
  LambdaWriteCloudwatchLogsPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: LambdaWriteCloudwatchLogs
      PolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Action: 
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: 
              - 'arn:aws:logs:*:*:*'
      Roles: 
        - !Ref FileProcessingLambdaExecutionRole
  FileProcessingLambda:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref CodeBucketName
        S3Key: !Ref CodeS3Key 
      Description: processes file 
      Environment: 
        Variables:
          INPUT_PREFIX: !Ref RawPrefix
          OUTPUT_PREFIX: !Ref ProcessedPrefix
      FunctionName: !Ref LambdaName
      Handler: processFile.lambda_handler
      Role: !GetAtt 
        - FileProcessingLambdaExecutionRole
        - Arn
      Runtime: python3.6
      Timeout: 60
  FileProcessingLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt
        - FileProcessingLambda
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub 'arn:aws:s3:::${FileBucketName}'         #use sub and not ref to avoid circular dependency 
  FileBucket: 
    # DependsOn:
    #   - FileProcessingLambdaInvokePermission
    Type: AWS::S3::Bucket
    Properties: 
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        IgnorePublicAcls: True
        BlockPublicPolicy: True
        RestrictPublicBuckets: True
      BucketEncryption: 
          ServerSideEncryptionConfiguration: 
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
      BucketName: !Ref FileBucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Filter:
              S3Key:
                Rules:
                  - 
                    Name: prefix
                    Value: !Ref RawPrefix
                  -
                    Name: suffix
                    Value: '.txt'
            Function: !GetAtt
              - FileProcessingLambda
              - Arn
  FileBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FileBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: DenyIncorrectEncryptionHeader
            Effect: Deny
            Principal: '*'
            Action: 's3:PutObject'
            Resource: 
              - !Sub 'arn:aws:s3:::${FileBucketName}/*'
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption': AES256
          - Sid: DenyUnEncryptedObjectUploads
            Effect: Deny
            Principal: '*'
            Action: 's3:PutObject'
            Resource: 
              - !Sub 'arn:aws:s3:::${FileBucketName}/*'
            Condition:
              'Null':
                's3:x-amz-server-side-encryption': True
  FileProcessingLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      RoleName: !Sub '${LambdaName}-EX-${AWS::Region}'
